{
    "contents" : "library(rattle)\nlibrary(rpart)\nlibrary(rpart.plot)\nlibrary(RColorBrewer)\nlibrary(randomForest)\nlibrary(gbm)\nlibrary(som)\n\n\n\nset.seed(415)\n\n#read the data\ntrain <- read.csv(\"~/Dropbox/Kaggle/Titanic/train.csv\")\ntest <- read.csv(\"~/Dropbox/Kaggle/Titanic/test.csv\")\ntrain$traintest <- \"train\"\ntest$traintest<-\"test\"\ntest$Survived<- NA\n\n#combine train and test set to do som operations on the columns\ncombi <- rbind(train, test)\n\n#convert the name from factor to character\ncombi$Name <- as.character(combi$Name)\n#add a Title column to the data\ncombi$Title <- sub(' ','',sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]}))\ncombi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'\ncombi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'\ncombi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'\ncombi$Title <- as.factor(combi$Title)\ntable(combi$Title)\n\n#Create familySize\ncombi$FamilySize <- combi$SibSp + combi$Parch + 1\n\n#Create lastname variable\ncombi$Surname <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})\n\ncombi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep=\"\")\ntable(combi$FamilyID)\n\ncombi$FamilyID[combi$FamilySize <= 3] <- 'Small'\nfamIDs <- data.frame(table(combi$FamilyID))\nfamIDs <- famIDs[famIDs$Freq <= 3,]\ncombi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- 'Small'\ncombi$FamilyID <- factor(combi$FamilyID)\n\n#For random forest we should get rid of missing values (simple CART and Boosting trees know how to handle this)\n#Getting rid of NA's can be done by first building a simple tree with the variable with missing values as the dependent.\n#Age is missing some values\nAgefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked,\n                data=combi[!is.na(combi$Age),], method=\"anova\")\ncombi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age),])\n\n#Predict the Fare for the missing value\nFarefit <- rpart(Fare ~ Pclass + Sex + SibSp + Parch + Fare + Embarked+Age,\n                data=combi[!is.na(combi$Fare),], method=\"anova\")\n\ncombi$Fare[is.na(combi$Fare)] <- predict(Farefit, combi[is.na(combi$Fare),])\n\n#Set the Embarked for the missing values to Southhampton\nwhich(combi$Embarked==\"\")\ncombi$Embarked[combi$Embarked ==\"\"] <- \"S\"\ntable(combi$Embarked)\n\n#Cabin or no cabin variable\ncombi$HasCabin = as.factor(sapply(combi$Cabin, function(x) if (x==\"\") 0 else 1))\n\n\n#the formula for the model\nformula <- as.factor(Survived) ~ Title+FamilySize+HasCabin+Pclass + Sex + Age + SibSp + Parch + Fare + Embarked+Fare\n\n#split the data again in a train and test set\ntrain <- combi[combi$traintest == \"train\",]\ntest <- combi[combi$traintest == \"test\",]\n\n\n\n#---------Building models\n#Built a som first\nsom(train)\nhelp(som)\n\n#Built a simple CART Tree\nfit <- rpart(formula, data=train,method=\"class\")\n\n#Plot the CART tree\nfancyRpartPlot(fit)\n\ndataSet <- data.frame(Title = train$Title,Sex = train$Sex, Survived=train$Survived)\n\n#built a randomd Forest (for a random forest we first need to take care of missing values)\nfit_rf <- randomForest(dataSet, data=train, importance=TRUE, ntree=2000, type='unsupervised' )\n#plot the importance of the variables of the random forest\nvarImpPlot(fit_rf)\n\n\n#built a boosted decison tree\nfit_gbm <- gbm(Survived ~ FamilyID+Title+FamilySize+HasCabin+Pclass + Sex + Age + SibSp + Parch + Fare + Embarked+Fare          \n               ,data=train,n.trees = 200,shrinkage=0.08, train.fraction=0.5)\nfit_gbm\n# check performance using an out-of-bag estimator\n# OOB underestimates the optimal number of iterations\nbest.iter <- gbm.perf(fit_gbm,method=\"test\")\nprint(best.iter)\n\n#Predict unknowns from the test set\nSurvived_RF <- predict(fit_rf, test, type = \"class\")\n\n#GBM: Predict unknowns from the test set\nSurvived_GBM <- predict.gbm(fit_gbm, test, type = \"response\")\nSurvived_GBM <- as.factor(sapply(Survived_GBM,function(x) if (x > 0.5) 1 else 0))\n\n\n#Submit results to kaggle\nsubmit <- data.frame(PassengerId = test$PassengerId, Survived = Survived_RF)\nwrite.csv(submit, file = \"randomforest.csv\", row.names = FALSE)\nsummary(submit)\n\n#Submit GBM to kaggle\nsubmit <- data.frame(PassengerId = test$PassengerId, Survived = Survived_GBM)\nwrite.csv(submit, file = \"gbm.csv\", row.names = FALSE)\nsummary(submit)\n\n\n",
    "created" : 1412357272109.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1891424114",
    "id" : "96D549A0",
    "lastKnownWriteTime" : 1412612781,
    "path" : "~/Dropbox/Kaggle/Titanic/Rpart.R",
    "project_path" : "Rpart.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}